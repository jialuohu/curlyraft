// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: raftcomm/raftcomm.proto

package raftcomm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	RaftCommunication_AppendEntries_FullMethodName   = "/raftcomm.RaftCommunication/AppendEntries"
	RaftCommunication_RequestVote_FullMethodName     = "/raftcomm.RaftCommunication/RequestVote"
	RaftCommunication_InstallSnapShot_FullMethodName = "/raftcomm.RaftCommunication/InstallSnapShot"
)

// RaftCommunicationClient is the client API for RaftCommunication service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RaftCommunicationClient interface {
	// / AppendEntries RPC is invoked by the leader to replicate log entries (§5.3)
	// / and also serves as a heartbeat (§5.2) when no entries are sent.
	// /
	// / Arguments:
	// /   term          – leader’s current term.
	// /   leaderId      – so follower can redirect clients.
	// /   prevLogIndex  – index of log entry immediately preceding new ones.
	// /   prevLogTerm   – term of prevLogIndex entry.
	// /   entries[]     – log entries to store (empty for heartbeat; may send more than one for efficiency).
	// /   leaderCommit  – leader’s commitIndex.
	// /
	// / Results:
	// /   term    – currentTerm, for leader to update itself.
	// /   success – true if follower contained entry matching prevLogIndex and prevLogTerm.
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	// / RequestVote RPC is invoked by candidates to gather votes (§5.2).
	// /
	// / Arguments:
	// /   term          – candidate’s current term.
	// /   candidateId   – ID of the candidate requesting vote.
	// /   lastLogIndex  – index of candidate’s last log entry (§5.4).
	// /   lastLogTerm   – term of candidate’s last log entry (§5.4).
	// /
	// / Results:
	// /   term          – currentTerm, for candidate to update itself if it’s stale.
	// /   voteGranted   – true means follower received and granted vote to the candidate.
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
	// / InstallSnapshot RPC is invoked by the leader to send chunks of a snapshot to a follower.
	// / Leaders always send chunks in order (§5.x).
	// /
	// / Arguments:
	// /   term               – leader’s current term.
	// /   leaderId           – leader’s ID so follower can redirect clients.
	// /   lastIncludedIndex  – the snapshot replaces all entries up through and including this index.
	// /   lastIncludedTerm   – term of the entry at lastIncludedIndex.
	// /   offset             – byte offset where this chunk is positioned in the snapshot file.
	// /   data               – raw bytes of the snapshot chunk, starting at offset.
	// /   done               – true if this is the last chunk.
	// /
	// / Results:
	// /   term               – currentTerm, for leader to update itself if its term is stale.
	InstallSnapShot(ctx context.Context, in *InstallSnapshotRequest, opts ...grpc.CallOption) (*InstallSnapshotResponse, error)
}

type raftCommunicationClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftCommunicationClient(cc grpc.ClientConnInterface) RaftCommunicationClient {
	return &raftCommunicationClient{cc}
}

func (c *raftCommunicationClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendEntriesResponse)
	err := c.cc.Invoke(ctx, RaftCommunication_AppendEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftCommunicationClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RequestVoteResponse)
	err := c.cc.Invoke(ctx, RaftCommunication_RequestVote_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftCommunicationClient) InstallSnapShot(ctx context.Context, in *InstallSnapshotRequest, opts ...grpc.CallOption) (*InstallSnapshotResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallSnapshotResponse)
	err := c.cc.Invoke(ctx, RaftCommunication_InstallSnapShot_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftCommunicationServer is the server API for RaftCommunication service.
// All implementations must embed UnimplementedRaftCommunicationServer
// for forward compatibility.
type RaftCommunicationServer interface {
	// / AppendEntries RPC is invoked by the leader to replicate log entries (§5.3)
	// / and also serves as a heartbeat (§5.2) when no entries are sent.
	// /
	// / Arguments:
	// /   term          – leader’s current term.
	// /   leaderId      – so follower can redirect clients.
	// /   prevLogIndex  – index of log entry immediately preceding new ones.
	// /   prevLogTerm   – term of prevLogIndex entry.
	// /   entries[]     – log entries to store (empty for heartbeat; may send more than one for efficiency).
	// /   leaderCommit  – leader’s commitIndex.
	// /
	// / Results:
	// /   term    – currentTerm, for leader to update itself.
	// /   success – true if follower contained entry matching prevLogIndex and prevLogTerm.
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	// / RequestVote RPC is invoked by candidates to gather votes (§5.2).
	// /
	// / Arguments:
	// /   term          – candidate’s current term.
	// /   candidateId   – ID of the candidate requesting vote.
	// /   lastLogIndex  – index of candidate’s last log entry (§5.4).
	// /   lastLogTerm   – term of candidate’s last log entry (§5.4).
	// /
	// / Results:
	// /   term          – currentTerm, for candidate to update itself if it’s stale.
	// /   voteGranted   – true means follower received and granted vote to the candidate.
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
	// / InstallSnapshot RPC is invoked by the leader to send chunks of a snapshot to a follower.
	// / Leaders always send chunks in order (§5.x).
	// /
	// / Arguments:
	// /   term               – leader’s current term.
	// /   leaderId           – leader’s ID so follower can redirect clients.
	// /   lastIncludedIndex  – the snapshot replaces all entries up through and including this index.
	// /   lastIncludedTerm   – term of the entry at lastIncludedIndex.
	// /   offset             – byte offset where this chunk is positioned in the snapshot file.
	// /   data               – raw bytes of the snapshot chunk, starting at offset.
	// /   done               – true if this is the last chunk.
	// /
	// / Results:
	// /   term               – currentTerm, for leader to update itself if its term is stale.
	InstallSnapShot(context.Context, *InstallSnapshotRequest) (*InstallSnapshotResponse, error)
	mustEmbedUnimplementedRaftCommunicationServer()
}

// UnimplementedRaftCommunicationServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRaftCommunicationServer struct{}

func (UnimplementedRaftCommunicationServer) AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (UnimplementedRaftCommunicationServer) RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (UnimplementedRaftCommunicationServer) InstallSnapShot(context.Context, *InstallSnapshotRequest) (*InstallSnapshotResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallSnapShot not implemented")
}
func (UnimplementedRaftCommunicationServer) mustEmbedUnimplementedRaftCommunicationServer() {}
func (UnimplementedRaftCommunicationServer) testEmbeddedByValue()                           {}

// UnsafeRaftCommunicationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RaftCommunicationServer will
// result in compilation errors.
type UnsafeRaftCommunicationServer interface {
	mustEmbedUnimplementedRaftCommunicationServer()
}

func RegisterRaftCommunicationServer(s grpc.ServiceRegistrar, srv RaftCommunicationServer) {
	// If the following call pancis, it indicates UnimplementedRaftCommunicationServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&RaftCommunication_ServiceDesc, srv)
}

func _RaftCommunication_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftCommunicationServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftCommunication_AppendEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftCommunicationServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftCommunication_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftCommunicationServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftCommunication_RequestVote_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftCommunicationServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftCommunication_InstallSnapShot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftCommunicationServer).InstallSnapShot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RaftCommunication_InstallSnapShot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftCommunicationServer).InstallSnapShot(ctx, req.(*InstallSnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RaftCommunication_ServiceDesc is the grpc.ServiceDesc for RaftCommunication service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RaftCommunication_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftcomm.RaftCommunication",
	HandlerType: (*RaftCommunicationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RaftCommunication_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftCommunication_RequestVote_Handler,
		},
		{
			MethodName: "InstallSnapShot",
			Handler:    _RaftCommunication_InstallSnapShot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftcomm/raftcomm.proto",
}

const (
	HealthCheck_Check_FullMethodName = "/raftcomm.HealthCheck/Check"
)

// HealthCheckClient is the client API for HealthCheck service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HealthCheckClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
}

type healthCheckClient struct {
	cc grpc.ClientConnInterface
}

func NewHealthCheckClient(cc grpc.ClientConnInterface) HealthCheckClient {
	return &healthCheckClient{cc}
}

func (c *healthCheckClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, HealthCheck_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HealthCheckServer is the server API for HealthCheck service.
// All implementations must embed UnimplementedHealthCheckServer
// for forward compatibility.
type HealthCheckServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	mustEmbedUnimplementedHealthCheckServer()
}

// UnimplementedHealthCheckServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedHealthCheckServer struct{}

func (UnimplementedHealthCheckServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedHealthCheckServer) mustEmbedUnimplementedHealthCheckServer() {}
func (UnimplementedHealthCheckServer) testEmbeddedByValue()                     {}

// UnsafeHealthCheckServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HealthCheckServer will
// result in compilation errors.
type UnsafeHealthCheckServer interface {
	mustEmbedUnimplementedHealthCheckServer()
}

func RegisterHealthCheckServer(s grpc.ServiceRegistrar, srv HealthCheckServer) {
	// If the following call pancis, it indicates UnimplementedHealthCheckServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&HealthCheck_ServiceDesc, srv)
}

func _HealthCheck_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HealthCheckServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: HealthCheck_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HealthCheckServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HealthCheck_ServiceDesc is the grpc.ServiceDesc for HealthCheck service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HealthCheck_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "raftcomm.HealthCheck",
	HandlerType: (*HealthCheckServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _HealthCheck_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raftcomm/raftcomm.proto",
}
